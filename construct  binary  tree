#include<iostream>
using namespace std;

class Node {
    int key;
    Node* left;
    Node* right;

public:
    Node() {
        key = -1;
        left = NULL;
        right = NULL;
    };
    void setKey(int aKey) {
        key = aKey;
    };
    void setLeft(Node* aLeft) {
        left = aLeft;
    };
    void setRight(Node* aRight) {
        right = aRight;
    };
    int Key() {
        return key;
    };
    Node* Left() {
        return left;
    };
    Node* Right() {
        return right;
    };
};

// Tree class
class Tree {
    Node* root;

public:
    Tree();
    ~Tree();
    Node* Root() {
        return root;
    };
    void addNode(int key);
    void inOrder(Node* n);
    void preOrder(Node* n);
    void postOrder(Node* n);

private:
    void addNode(int key, Node* leaf);
    void freeNode(Node* leaf);
};

// Constructor
Tree::Tree() {
    root = NULL;
}

// Destructor
Tree::~Tree() {
    freeNode(root);
}

// Free the node
void Tree::freeNode(Node* leaf) {
    if (leaf != NULL) {
        freeNode(leaf->Left());
        freeNode(leaf->Right());
        delete leaf;
    }
}

// Add a node
void Tree::addNode(int key) {
    if (root == NULL) {
        cout << "Add root node... " << key << endl;
        Node* n = new Node();
        n->setKey(key);
        root = n;
    } else {
        cout << "Add other node... " << key << endl;
        addNode(key, root);
    }
}

// Add a node (private)
void Tree::addNode(int key, Node* leaf) {
    if (key <= leaf->Key()) {
        if (leaf->Left() != NULL)
            addNode(key, leaf->Left());
        else {
            Node* n = new Node();
            n->setKey(key);
            leaf->setLeft(n);
        }
    } else {
        if (leaf->Right() != NULL)
            addNode(key, leaf->Right());
        else {
            Node* n = new Node();
            n->setKey(key);
            leaf->setRight(n);
        }
    }
}
